<?php

define('IMX_USERS_CX_URL', 'https://api.cxense.com/traffic');
define('IMX_USERS_CX_AUTH_USERNAME','david.gil@gimm.com.mx');
define('IMX_USERS_CX_AUTH_SECRET','api&user&In/f/tfvy2qAPdQgCB2WBQ==');
define('IMX_USERS_CX_SITE_ID',variable_get('imx_users_cxense_id', '9222311772423575875'));

/**
 * Implements hook_permisson().
 */
function imx_users_permission() {
  $permissions['administer imx_users'] = array(
    'title' => t('Administer imx_users.'),
    'restrict access' => TRUE,
  );
  return $permissions;
}

function imx_users_help($path, $arg) {
  if ($path == 'admin/help#imx_users') {
    return t('Configuración de parámetros imx_users');
  }
}

/**
 * Implements hook_menu().
 */
function imx_users_menu() {
  $items = array();
  $items['admin/config/imx_users'] = array(
    'title' => t('Configuracion de bloques de usuario'),
    'description' => t('Parámetros de configuracion de bloques de usuario'),
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/imx_users/settings'] = array(
    'title' => 'Configurar paŕametros de listado.',
    'description' => 'Configuracion de parámetros de listado de resultados notas de usuario.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imx_users_list_frm'),
    'access arguments' => array('administer'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
* Implementation of hook_menu_alter().
*/
function imx_users_menu_alter(&$items) {
  $items['user/%user/edit']['type'] = MENU_CALLBACK;
  $items['user/%user/scheduler']['type'] = MENU_CALLBACK;
  $items['user/%user/devel']['type'] = MENU_CALLBACK;
  $items['user/%user/view']['type'] = MENU_CALLBACK;
  $items['user/%/favorites']['type'] = MENU_CALLBACK;
  $items['user/%/site-favorites']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_block_info().
 */
function imx_users_block_info() {
  $blocks = array();
  $blocks["imx_users_list"] = array(
    'info'=> t('Muestra Bloque listado de notas por usuario.'),
    'cache'=>DRUPAL_CACHE_GLOBAL,
  );
  $blocks["imx_users_profile"] = array(
    'info'=> t('Muestra Bloque perfil de usuario.'),
    'cache'=>DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */

function imx_users_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'imx_users_list' :
      $content = '';
      drupal_add_css(drupal_get_path('module','imx_users').'/css/imx_users.css');
      $user = menu_get_object('user');
      if ($user && is_object($user)) {
        $theme = 'imx_users_list';
        $image_style = 'medium';
        $content_types = variable_get('imx_users_content_types', array('article'));
        $options = array(
          'title' => $user->name,
          'uid' => $user->uid,
          'theme' => $theme,
          'content_types' => $content_types,
        );

        //configuración para paginador inicio
        $pager_options = array(
          'pager' => TRUE,
          #'up' => true,
          'down' => TRUE,
        );
        //configuración para paginador fin

        $content = imx_users_get_nodes_list($options, $offset = 0, $limit = 10, $pager_options);
      }
      $block['subject'] = t('Muestra Bloque listado de notas por usuario.');
      $block['content'] = $content;
    break;

    case 'imx_users_profile' :
      $content = '';
      drupal_add_css(drupal_get_path('module','imx_users').'/css/imx_users_profile.css');
      $user_view = menu_get_object('user');
      if (sizeof($user_view->roles) > 1) {
        if ($user_view && is_object($user_view)) {
          $variable_facebook = variable_get('imx_users_profile_facebook', FALSE);
          $where_facebook = variable_get('imx_users_profile_facebook_where');
          $variable_twitter = variable_get('imx_users_profile_twitter', FALSE);
          $where_twitter = variable_get('imx_users_profile_twitter_where');
          $variable_signature = variable_get('imx_users_profile_signature', FALSE);
          $where_signature = variable_get('imx_users_profile_signature_where');

          if ($variable_facebook && $variable_twitter && $variable_signature) {
            //From User
            if ($where_facebook == 'user'){
              $facebook_name = strip_tags($user_view->{$variable_facebook}['und'][0]['value']);
            }
            if ($where_twitter == 'user'){
              $twitter_name = strip_tags($user_view->{$variable_twitter}['und'][0]['value']);
            }
            if ($where_signature == 'user'){
              $signature = strip_tags($user_view->{$variable_signature}['und'][0]['value']);
            }
            if (isset($user_view->picture->{'uri'})){
              $image = file_create_url($user_view->picture->{'uri'});
            }

            //From Profile2 if exists
            $profile = variable_get('imx_users_profile_name',NULL);
            if (function_exists('profile2_load_by_user') && isset($profile)) {
              $profile = profile2_load_by_user($user_view->uid, $profile);
              if ($profile) {
                if ($profile->{$variable_facebook} || $user_view->{$variable_facebook}) {
                  if ($where_facebook == 'profile2')
                    $facebook_name = strip_tags($profile->{$variable_facebook}['und'][0]['value']);
                }
                if ($profile->{$variable_twitter} || $user_view->{$variable_twitter}) {
                  if ($where_twitter == 'profile2')
                    $twitter_name = strip_tags($profile->{$variable_twitter}['und'][0]['value']);
                }
                if ($profile->{$variable_signature} || $user_view->{$variable_signature}) {
                  if ($where_signature == 'profile2')
                    $signature = strip_tags($profile->{$variable_signature}['und'][0]['value']);
                }
                if (isset($profile->field_profile_background['und'][0]['uri'])) {
                  $background = file_create_url($profile->field_profile_background['und'][0]['uri']);
                }
              }
            }
          }
          global $user;
          if (user_is_logged_in() && $user->uid == $user_view->uid)
            $login = TRUE;
          $data = array(
            'name' => $user_view->name,
            'faceboook' => $facebook_name,
            'twitter' => $twitter_name,
            'signature' => $signature,
            'image' => $image,
            'background' => $background,
            'login' => $login,
          );
          $content = array(
            '#data' => $data,
            '#theme' => 'imx_users_profile',
          );
        }
      }

      $block['subject'] = t('Muestra Bloque perfil de usuario.');
      $block['content'] = $content;
    break;

  }

  return $block;
}

/**
 * Implements hook_theme
 */

function imx_users_theme() {
  return array(
    'imx_users_list' => array(
      'variables' => array(
        'data' => NULL,
        'title' => NULL,
        'total_traffic' => NULL,
      ),
      'template' => 'imx_users_list',
    ),
    'imx_users_profile' => array(
      'variables' => array(
        'data' => NULL,
      ),
      'template' => 'imx_users_profile',
    ),
  );
}

/**
 * Implements hook_template_preprocess_theme
 */
function template_preprocess_imx_users(&$variables) {
  $variables['data'] = $variables['data'];
}

/**
 * Regresa n nodos más recientes por termino de taxonomia de x vocabulario
 * @param int or array $tid id de termino(s) de taxonomia
 * @param int $vid id de vocabulario
 * @param int $uid id de usuario conductor
 * @param int $offset a partir de que indice
 * @param int $limit cantidad de nodos
 * @return array
 */
function imx_users_get_nodes_list($options, $offset = 0, $limit = 1, $pager = null) {
  $data = array();
  $output = '';

  if (!isset($options['uid']))
    return $output;

  if (!isset($options['content_types']))
    $options['content_types'] = array('article','video','gallerie');

  $query = db_select('node','n');
  $query->fields('n', array('nid'));
  $query->condition('n.status', 1, '=');
  $query->condition('n.type', $options['content_types'], 'IN');

  if (variable_get('imx_users_relateds', FALSE)) {
    $table = 'field_data_' . variable_get('imx_users_relateds');
    if (variable_get('imx_users_relateds_field_custom', FALSE))
      $field = variable_get('imx_users_relateds_field_custom');
    else
      $field = variable_get('imx_users_relateds').'_uid';

    if (db_field_exists($table, $field)) {
      $query = db_select('node','n');
      $query->leftjoin($table, 'fdfr', 'n.nid = fdfr.entity_id');
      $query->fields('n', array('nid'));
      $query->condition('n.status', 1, '=');
      $query->condition('n.type', $options['content_types'], 'IN');

      $and = db_and();
      $and->condition('n.uid', $options['uid'], '=');
      $and->isNull('fdfr.'.$field);

      $or = db_or();
      $or->condition($and);
      $or->condition('fdfr.'.$field, $options['uid'], '=');

      $query->condition($or);
    }
    else {
      $log = array(
        'query' => 'El campo: ' . $field . ' no existe en la tabla: ' . $table,
      );
      imx_users_log(json_encode($log));
      $query->condition('n.uid', $options['uid'], '=');
    }
  }
  else
  {
    $query->condition('n.uid', $options['uid'], '=');
  }

  if (isset($options['orderByChanged']) && $options['orderByChanged'])
    $query->orderby('n.changed', 'DESC');
  else
    $query->orderby('n.created', 'DESC');

  if (!($pager['pager'])) {
    $query->range($offset, $limit);
    //dvm('sin pager');
    #dpq($query);
    $result = $query->execute();

    $num_of_results = $result->rowCount();

    if ($result && $num_of_results > 0 ){
      foreach ($result as $key => $value) {
        $data[] = array($value->nid);
      }
    }

    return $data;
  }
  else {
    $title = isset($options['title'])?$options['title']:NULL; // titulo leyenda
    $theme = isset($options['theme'])?$options['theme']:'imx_rn_flujo_btn'; //tema de tpl
    $pager_default = isset($options['pager_default'])?$options['pager_default']:'PagerDefault'; //clase de paginador

    $query->extend($pager_default)->limit($limit)->execute();

    $result = $query->execute();
    $num_of_results = $result->rowCount();
    if ($result && $num_of_results > 0 ){
      foreach ($result as $key => $value) {
        $node = node_load($value->nid);
        $data[] = imx_users_get_node_data_formated($node);
        unset($node);
      }
    }

    //get traffic
    $traffic = array();
    $total_traffic = array();
    global $user;
    if (FALSE) {
      #if ($user->uid == $options['uid'] && sizeof($data) > 0) { //only if owner user
      $debug = variable_get('imx_users_debug_http', FALSE);
      foreach ($data as $key_data => $value_data) {
        if ($debug)
          $full_url = $debug . drupal_get_path_alias('node/' . $value_data['nid']); //hardcode
        else
          $full_url = $value_data['full_url'];

        $ch_data = imx_users_get_cxense_traffic2($full_url);

        if ($ch_data['http_code'] == 200 && $ch_data['error'] == 0) {
          if (isset($ch_data['output']['data']['uniqueUsers'])) {
            $traffic[$value_data['nid']] = $ch_data['output'];
          }
        }
        else if($ch_data['http_code'] <> 200 && $ch_data['error'] == 0) {
          $log = array(
            'url' => $full_url,
            'response' => $ch_data,
          );
          imx_users_log(json_encode($log));
        }
        else { //curl error
          $log = array(
            'url' => $full_url,
            'response' => $ch_data,
          );
          imx_users_log(json_encode($log));
        }
        $data[$key_data]['traffic'] = imx_users_get_traffic($traffic, $value_data['nid']);
      }
      $total_traffic = imx_users_get_total_traffic($traffic);
    }

    $args = array('tags' => array(t(''), variable_get('imx_users_pager_prev',' '), '',variable_get('imx_users_pager_next',' '),t('')));
    $output .= ($pager['up'])? theme('pager', $args):'';
    $output .= theme( $theme, array('data' => $data, 'title' => $title, 'total_traffic' => $total_traffic) );
    $output .= ($pager['down'])? theme('pager', $args):'';

    return $output;
  }
}


/**
 * Formatea los datos de nodo para el pintado
 * @param array $node
 * @param string $image_style
 * @param boolean $uid
 * @param array $options
 * @return array
 */
function imx_users_get_node_data_formated($node, $options = NULL) {
  global $base_url;
  $data = array();
  $summary = NULL;
  $summary_count = variable_get('imx_users_summary_max_length',300);

  /** summary count inicio */
  if (isset($options['summary_count'])) {
    $summary_count = $options['summary_count'];
  }
  /** summary count fin */

  /** sumario inicio */
  if (isset($node->body['und'][0]['safe_summary'])) {
    if (strlen(trim($node->body['und'][0]['safe_summary'])) > 0) {
      $summary = truncate_utf8(strip_tags($node->body['und'][0]['safe_summary']), $summary_count, FALSE, TRUE, 5);
    }
    else {
      $summary = truncate_utf8(strip_tags($node->body['und'][0]['safe_value']), $summary_count, FALSE, TRUE, 5);
    }
  }
  else {
    if (strlen(trim($node->body['und'][0]['summary'])) > 0) {
      $summary = truncate_utf8(strip_tags($node->body['und'][0]['summary']), $summary_count, FALSE, TRUE, 5);
    }
    else {
      $summary = truncate_utf8(strip_tags($node->body['und'][0]['value']), $summary_count, FALSE, TRUE, 5);
    }
  }
  /** sumario fin */

  $data = array(
    'nid' => $node->nid,
    'tid' => isset($category_id)? $category_id: NULL,
    'title' => $node->title,
    'date' => date('d/m/Y',$node->created),
    'url' => drupal_get_path_alias('node/' . $node->nid),
    'full_url' => $base_url . '/' . drupal_get_path_alias('node/' . $node->nid),
    'social_url' => $base_url . '/' . drupal_get_path_alias('node/' . $node->nid),
    'twitter_text' => truncate_utf8($node->title, 100, FALSE, TRUE, 5),
    'twitter_via' => 'Dinero_Exc',
    'summary' => $summary,
    'node_reference_nid' => $node_references_nids,
    'created' => date('H:i',$node->created),
    'created_timestamp' => $node->created,
    'changed_timestamp' => $node->changed,
  );

  return $data;
}

function imx_users_list_frm($form, &$form_state) {
    $form['content'] = array(
        '#type' => 'fieldset',
        '#title' => t('Parámetros listado'),
    );
  
    $form['content']['imx_users_content_types'] = array(
        '#type' => 'select',
        '#title' => t('Tipos de contenido a mostrar'),
        '#description' => t("Puedes seleccionar más de un valor."),
        '#multiple' => TRUE,
        '#required' => TRUE,
        '#options' => drupal_map_assoc(array_keys(node_type_get_types())),
        '#default_value' => variable_get('imx_users_content_types'),
    );

    $form['content']["imx_users_relateds"] = array(
        '#type' => 'textfield',
        '#title' => t("Machine name del campo del usuario referenciado (si es que aplica)."),
        '#description' => t("Ej. 'field_user'. Los tipos de contenido seleccionados deben tener este campo."),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_relateds",FALSE),
    );

    $form['profile'] = array(
        '#type' => 'fieldset',
        '#title' => t('Parámetros perfil de usuario'),
    );
    $form['profile']["imx_users_profile_name"] = array(
        '#type' => 'textfield',
        '#title' => t("Machine name del nombre de perfil."),
        '#description' => t("Ej. 'main'"),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_profile_name",FALSE),
    );
    $user_entity = array('user'=>'Usuario', 'profile2'=>'Perfil');
    $form['profile']['facebook'] = array(
        '#type' => 'fieldset',
        '#title' => t('Campo Facebook'),
    );
    $form['profile']['facebook']["imx_users_profile_facebook_where"] = array(
        '#type' => 'select',
        '#title' => t("Tomar datos de:"),
        '#options' => $user_entity,
        '#default_value' => variable_get("imx_users_profile_facebook_where")
    );
    $form['profile']['facebook']["imx_users_profile_facebook"] = array(
        '#type' => 'textfield',
        '#title' => t("Machine name del campo facebook."),
        '#description' => t("Ej. 'field_facebook_username'."),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_profile_facebook",FALSE),
        '#required' => TRUE,
    );

    $form['profile']['twitter'] = array(
        '#type' => 'fieldset',
        '#title' => t('Campo Twitter'),
    );
    $form['profile']['twitter']["imx_users_profile_twitter_where"] = array(
        '#type' => 'select',
        '#title' => t("Tomar datos de:"),
        '#options' => $user_entity,
        '#default_value' => variable_get("imx_users_profile_twitter_where")
    );
    $form['profile']['twitter']["imx_users_profile_twitter"] = array(
        '#type' => 'textfield',
        '#title' => t("Machine name del campo twitter."),
        '#description' => t("Ej. 'field_twitter_username'."),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_profile_twitter",FALSE),
        '#required' => TRUE,
    );

    $form['profile']['signature'] = array(
        '#type' => 'fieldset',
        '#title' => t('Campo Biografía'),
    );
    $form['profile']['signature']["imx_users_profile_signature_where"] = array(
        '#type' => 'select',
        '#title' => t("Tomar datos de:"),
        '#options' => $user_entity,
        '#default_value' => variable_get("imx_users_profile_signature_where")
    );
    $form['profile']['signature']["imx_users_profile_signature"] = array(
        '#type' => 'textfield',
        '#title' => t("Machine name del campo firma."),
        '#description' => t("Ej. 'field_resumenprof'."),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_profile_signature",FALSE),
        '#required' => TRUE,
    );
    $form['cXense'] = array(
        '#type' => 'fieldset',
        '#title' => t('cXense'),
    );

    $form['cXense']['imx_users_cxense_id'] = array(
        '#type' => 'textfield',
        '#title' => t("cXense ID"),
        '#description' => t("cxense ID"),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_cxense_id",FALSE),
        '#required' => FALSE,
    );
    $form['debug'] = array(
        '#type' => 'fieldset',
        '#title' => t('Debug'),
    );
    $form['debug']['imx_users_debug_http'] = array(
        '#type' => 'textfield',
        '#title' => t("URL de sitio."),
        '#description' => t("Escriba el nombre de dominio para depurar el su local o prep. Ej. http://www.dineroenimagen.com/"),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_debug_http",FALSE),
        '#required' => FALSE,
    );
    $form['debug']['imx_users_debug_path'] = array(
        '#type' => 'textfield',
        '#title' => t("Ruta log"),
        '#description' => t("Escriba la ruta donde almacenar el log."),
        '#size' =>40,
        '#default_value' => variable_get("imx_users_debug_path",FALSE),
        '#required' => FALSE,
    );

    $form['imx_users_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Guardar',
    );
    
    return $form;
}

function imx_users_list_frm_validate($form, &$form_state) {
    $error  = FALSE;
    $content_types = $form_state['values']['imx_users_content_types'];
    if (!is_array($content_types) || empty($content_types)) {
        form_set_error('imx_users_content_types', t('Es necesario seleccionar tipos de contenido.'));
    }
    if (strlen($form_state['values']['imx_users_relateds']) > 0) {
        foreach ($content_types as $key_type => $value_type) {
            if (!field_info_instance('node', $form_state['values']['imx_users_relateds'], $value_type))
                $error = TRUE;
        }
    }
    if ($error) {
        form_set_error('imx_users_relateds', 'El campo ' . $form_state['values']['imx_users_relateds'] . ' no esta presente en algún tipo de contenido seleccionado.');
    }
    $profile_name = $form_state['values']['imx_users_profile_name'];
    if (function_exists('profile2_type_load')) {
        $profile = profile2_type_load($form_state['values']['imx_users_profile_name']);
        if (!$profile || !is_object($profile))
        form_set_error('imx_users_profile_name', t('El perfil "'.$profile_name. '" no existe.'));
    }
    else {
        //form_set_error('imx_users_profile_name', t('Módulo Profile2 ausente.'));
    }

    $field_facebook = $form_state['values']['imx_users_profile_facebook'];
    $where_facebook = $form_state['values']['imx_users_profile_facebook_where'];
    $bundle_facebook = $where_facebook == 'user'? 'user': $profile_name;

    if(!field_info_instance($where_facebook, $field_facebook, $bundle_facebook))
        form_set_error('imx_users_profile_facebook', 'El campo ' . $field_facebook . ' no existe en el perfil "'.$bundle_facebook.'"');

    $field_twitter = $form_state['values']['imx_users_profile_twitter'];
    $where_twitter = $form_state['values']['imx_users_profile_twitter_where'];
    $bundle_twitter = $where_twitter == 'user'? 'user': $profile_name;
    if(!field_info_instance($where_twitter, $field_twitter, $bundle_twitter))
        form_set_error('imx_users_profile_twitter', 'El campo ' . $field_twitter . ' no existe en el perfil "'.$bundle_twitter.'"');

    $field_signature = $form_state['values']['imx_users_profile_signature'];
    $where_signature = $form_state['values']['imx_users_profile_signature_where'];
    $bundle_signature = $where_signature == 'user'? 'user': $profile_name;
    if(!field_info_instance($where_signature, $field_signature, $bundle_signature))
        form_set_error('imx_users_profile_signature', 'El campo ' . $field_signature . ' no existe en el perfil "'.$bundle_signature.'"');
}

function imx_users_list_frm_submit($form, &$form_state) {
    variable_set('imx_users_content_types', $form_state['values']['imx_users_content_types']);
    variable_set('imx_users_relateds', $form_state['values']['imx_users_relateds']);
    variable_set('imx_users_profile_name', $form_state['values']['imx_users_profile_name']);
    variable_set('imx_users_profile_facebook', $form_state['values']['imx_users_profile_facebook']);
    variable_set('imx_users_profile_facebook_where', $form_state['values']['imx_users_profile_facebook_where']);
    variable_set('imx_users_profile_twitter', $form_state['values']['imx_users_profile_twitter']);
    variable_set('imx_users_profile_twitter_where', $form_state['values']['imx_users_profile_twitter_where']);
    variable_set('imx_users_profile_signature', $form_state['values']['imx_users_profile_signature']);
    variable_set('imx_users_profile_signature_where', $form_state['values']['imx_users_profile_signature_where']);
    variable_set('imx_users_debug_http', $form_state['values']['imx_users_debug_http']);
    variable_set('imx_users_cxense_id', $form_state['values']['imx_users_cxense_id']);
    variable_set('imx_users_debug_path', $form_state['values']['imx_users_debug_path']);
    drupal_set_message('Parámetros salvados.');
}

/**
 * Recupera perfil de usuario
 * @param int $uid id de usuario
 * @param string $type tipo de perfil
 * @return array usuario y perfil
 */
function imx_users_get_user_and_profile($uid = NULL, $type = 'main') {
    if ($uid)
        return FALSE;
    $edit_user = user_load((int)$uid, TRUE);
    $edit_profile = profile2_load_by_user($edit_user, $type);
    return array(
        'user' => $edit_user,
        'profile2' => $edit_profile,
    );
}

function imx_users_get_cxense_traffic($url_traffic = NULL, $siteID = null) {
    if (is_null($siteID))
        $siteID = "9222311772423575875";

    $username = "david.gil@gimm.com.mx";
    $apikey = "api&user&In/f/tfvy2qAPdQgCB2WBQ==";

    // ISO-8601 with milliseconds.
    $date = date("o-m-d\TH:i:s.000O");
     
    // need PHP >5.1.2
    $signature=hash_hmac("sha256", $date, $apikey);
     
    $url = 'https://api.cxense.com/traffic';
    $plainjson_payload = array(
        #"start" => 1412762900,
        #"start" => "2014-10-09T05:00:00.0Z",
        "start" => "-1M",
        #"stop" => "2014-10-10T05:00:00.0Z",
        "fields" => array(
            "events",
            "uniqueUsers",
            "activeTime",
            "urls",
            "sessionStarts",
            "sessionStops",
            "sessionBounces"
        ),
        "filters" => array(
            array(
                "type" => "event",
                "group" => "url",
                "items" => array(
                    $url_traffic,
                ),
            )
        ),
        "siteId" => $siteID,
    );

    // use key 'http' even if you send the request to https://...
    $options = array(
        'http' => array(
            'header'  => "X-cXense-Authentication: username=$username date=$date hmac-sha256-hex=$signature\r\n",
            'method'  => 'POST',
            'content' => json_encode($plainjson_payload),
        ),
    );
    $context  = stream_context_create($options);
    $result = @file_get_contents($url, FALSE, $context);

    return json_decode($result,TRUE);
}

function imx_users_get_traffic($traffic = array(), $nid = NULL) {
    if (is_null($nid))
        return NULL;

    if (array_key_exists($nid, $traffic)) {
        return $traffic[$nid];
    }

    return NULL;
}

function conversorSegundosHoras($tiempo_en_segundos) {
    if ($tiempo_en_segundos == 0)
        return '0s';
    $tiempo_en_segundos = intval($tiempo_en_segundos);
    $horas = floor($tiempo_en_segundos / 3600);
    $minutos = floor(($tiempo_en_segundos - ($horas * 3600)) / 60);
    $segundos = $tiempo_en_segundos - ($horas * 3600) - ($minutos * 60);
 
    $hora_texto = "";
    if ($horas > 0 ) {
        $hora_texto .= $horas . "h ";
        #$hora_texto .= $horas . ":";
    }
 
    if ($minutos > 0 ) {
        $hora_texto .= $minutos . "m ";
        #$hora_texto .= $minutos . ":";
    }
 
    if ($segundos > 0 ) {
        $hora_texto .= $segundos . "s";
        #$hora_texto .= $segundos . "";
    }
    /*if ($tiempo_en_segundos <= 60) {
        $hora_texto .= "s"; 
    }*/
 
    return $hora_texto;
}

function imx_users_get_total_traffic($traffic) {
    $totalUniqueUsers = 0;
    $totalActiveTime = 0;
    $totalEvents = 0;
    $averageActiveTime = NULL;
    $peso_x_datos = 0;
    $datos = 0;
    $media_ponderada = NULL;
    foreach ($traffic as $key => $value) {
        if (isset($value['data']['uniqueUsers'])) {
            $totalUniqueUsers += $value['data']['uniqueUsers'];
        }
        if (isset($value['data']['events'])) {
            $totalEvents += $value['data']['events'];
        }
        if (isset($value['data']['activeTime'])) {
            $totalActiveTime += $value['data']['activeTime'];
        }
        if (isset($value['data']['uniqueUsers']) && isset($value['data']['uniqueUsers']) > 0) {
                $peso_x_datos += $value['data']['activeTime'] * $value['data']['uniqueUsers'];
                $datos += $value['data']['uniqueUsers'];
        }

    }
    
    //media ponderada
    if ($datos > 0)
        $media_ponderada = $peso_x_datos / $datos;
    /*if (sizeof($traffic) > 0)
    $averageActiveTime = $totalActiveTime / sizeof($traffic);*/

    return array(
        'totalUniqueUsers' => $totalUniqueUsers,
        'totalEvents' => $totalEvents,
        'totalActiveTime' => $totalActiveTime,
        'averageActiveTime' => $media_ponderada,
    );
}

function imx_users_get_cxense_traffic2($url) {
    $cx_auth_date = date("o-m-d\TH:i:s.000O");
    $cx_auth_signature =  hash_hmac ( 'sha256' , $cx_auth_date , IMX_USERS_CX_AUTH_SECRET );

    $cx_req = array(
        "start" => "-1M",
        "fields" => array(
            "events",
            "uniqueUsers",
            "activeTime",
            "urls",
            "sessionStarts",
            "sessionStops",
            "sessionBounces"
        ),
        "filters" => array(
            array(
                "type" => "event",
                "group" => "url",
                "items" => array(
                    $url,
                ),
            )
        ),
        "siteId" => IMX_USERS_CX_SITE_ID,
    );

    $cx_json_req = json_encode($cx_req);
    $header = array(
        'Content-Type: application/json',
        'Content-Length: ' . strlen($cx_json_req),
        "X-cXense-Authentication: username=" . IMX_USERS_CX_AUTH_USERNAME . " date={$cx_auth_date} hmac-sha256-hex={$cx_auth_signature}"
    );

    $ch = curl_init(IMX_USERS_CX_URL);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $cx_json_req);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20);
    curl_setopt($ch, CURLOPT_TIMEOUT, 20);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);

    $output = curl_exec($ch);

    $ch_data['output'] = json_decode($output, true);
    $ch_data['error'] = curl_errno($ch);
    $ch_data['error_msg'] = curl_error($ch);
    $ch_data['header'] = curl_getinfo($ch);
    $ch_data['http_code'] = curl_getinfo($ch, CURLINFO_HTTP_CODE);

    curl_close($ch);
    return $ch_data;
}

function imx_users_log($log) {
  $path = variable_get('imx_users_debug_path', false);
  if ($path) {
    if (file_exists($path)) {
      $file = $path . 'imx_users.log';
      $resource = fopen($file, 'a+');
      fwrite($resource, date("h:i:s d-m-Y") . ' => ');
      fwrite($resource, $log . PHP_EOL);
      fclose($resource);
    }
  }
}