<?php

include_once "imx_gcms_helper.inc";

define("IMX_API_BASE_URL", variable_get("imx_gcms_api_base_url", "http://api.inventmx.com/v1/"));
define("IMX_API_TOKEN", variable_get("imx_gcms_api_token", "3a5877fc16b6fcbf8eedbe55d091938a"));
define("IMX_GCMS_SITE", variable_get("imx_gcms_api_site_default", ""));
define("IMX_API_QUEUE_DNS", variable_get("imx_gcms_queue_dns", "api-mongo"));
define("IMX_API_QUEUE_PORT", variable_get("imx_gcms_queue_port", "11300"));


define("IMX_GCMS_FIELD_IMAGE", variable_get("imx_gcms_field_image", "field_image"));
define("IMX_GCMS_FIELD_IMAGES", variable_get("imx_gcms_field_images", "field_images"));
define("IMX_GCMS_FIELD_VIDEO", variable_get("imx_gcms_field_video", "field_video"));
define("IMX_GCMS_FIELD_VIDEO_URL", variable_get("imx_gcms_field_video_url", "field_video_url"));
define("IMX_GCMS_FIELD_VIDEO_desc", variable_get("imx_gcms_field_video_desc", "field_video_desc"));
define("IMX_GCMS_FIELD_AUTOR", variable_get("imx_gcms_field_autor", "field_autor"));


define("IMX_GCMS_CONTENT_ARTICLE", variable_get("imx_gcms_content_article", "article"));
define("IMX_GCMS_CONTENT_GALLERIE", variable_get("imx_gcms_content_gallerie", "gallerie"));
define("IMX_GCMS_CONTENT_VIDEO", variable_get("imx_gcms_content_video", "video"));

/*
 * Implements hook_menu().
 */

function imx_gcms_menu()
{
    $items = array();

    $items['admin/config/imx_gcms'] = array(
        'title'            => 'InventMx GCMS',
        'description'      => 'Configuración de InvemtMX GCMS.',
        'access callback'  => TRUE,
        'page callback'    => 'system_admin_menu_block_page',
        'access arguments' => array('administer imx gcms'),
        'position'         => 'right',
        'weight'           => -200,
        'file'             => 'system.admin.inc',
        'file path'        => drupal_get_path('module', 'system'),
    );


    $items['admin/config/imx_gcms/prepare/add'] = array(
        'title'            => t('Transferencia de imágenes'),
        'page callback'    => 'batch_transfer_image',
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
    );


    $items['admin/content/imx_gcms'] = array(
        'title'            => t('Red InventMX'),
        'description'      => t('Contenidos de la Red de InventMx'),
        'page callback'    => 'imx_gcms_sites_list',
        'access arguments' => array('administer imx gcms'),
        'type'             => MENU_LOCAL_TASK,
    );

    $items['admin/content/recs_gcms'] = array(
        'title'            => t('Recomendaciones InventMX'),
        'description'      => t('Contenidos recomendados de la Red de InventMx'),
        'page callback'    => 'imx_gcms_recs',
        'access arguments' => array('administer imx gcms'),
        'type'             => MENU_LOCAL_TASK,
    );

    $items['admin/content/imx_gcms_recs/sended'] = array(
        'title'            => t('Recomendaciones Enviadas'),
        'description'      => t('Contenidos recomendados a InventMx'),
        'page callback'    => 'imx_gcms_recs_history_list',
        'access arguments' => array('administer imx gcms'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'imx_gcms.admin.inc',
    );

    $items['admin/content/imx_gcms_imports'] = array(
        'title'            => t('Contenidos importados'),
        'description'      => t('Contenidos importados'),
        'page callback'    => 'imx_gcms_imports_history_list',
        'access arguments' => array('administer imx gcms'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'imx_gcms.admin.inc',
    );

    /* Configuracion de la seccion de Frameworks */
    $items['admin/config/imx_gcms/add'] = array(
        'title'           => t('Create article'),
        'page callback'   => 'imx_gcms_add_item',
        'access callback' => TRUE,
        'type'            => MENU_CALLBACK,
        'file path'       => drupal_get_path('module', 'node'),
        'file'            => 'node.pages.inc',
    );

    $items['admin/config/imx_gcms/details'] = array(
        'title'           => t('Details content'),
        'page callback'   => 'imx_gcms_detail_item',
        'access callback' => TRUE,
        'type'            => MENU_CALLBACK,
    );

    /* Configuracion de la seccion de SITIOS */
    $items['admin/config/imx_gcms/sites'] = array(
        'title'            => 'GCMS- Explorar Sitios InventMX',
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_sites_list',
        'access_callback'  => TRUE,
    );


    /* Configuracion de la seccion de SITIOS */

    $items['admin/config/imx_gcms/sites/manage_recs'] = array(
        'title'            => 'GCMS-Red InventMX',
        'type'             => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('administer imx gcms'),
        'weight'           => -10
    );

    /* Configuracion de la seccion de SITIOS */
    $items['admin/config/imx_gcms/sites/imports'] = array(
        'title'            => 'GCMS-Contenidos Importados',
        "type"             => MENU_LOCAL_TASK,
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_imports_history_list',
        'access_callback'  => TRUE,
        'weight'           => -10,
        'file'             => 'imx_gcms.admin.inc',
    );

    $items['admin/config/imx_gcms/sites/manage_sites'] = array(
        'title'            => 'GCMS-Recomendaciones para mi sitio',
        "access callback"  => TRUE,
        "page callback"    => "imx_gcms_recs",
        "type"             => MENU_LOCAL_TASK,
        'access arguments' => array('administer imx gcms'),
        'weight'           => -10
    );

    $items['admin/config/imx_gcms/shares'] = array(
        'title'            => 'GCMS-Contenidos enviados',
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_recs_history_list',
        'access_callback'  => TRUE,
        'file'             => 'imx_gcms.admin.inc',
    );

    /* Configuracion de la seccion de SITIOS */
    $items['admin/config/imx_gcms/imports'] = array(
        'title'            => 'GCMS-Contenidos Importados',
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_imports_history_list',
        'access_callback'  => TRUE,
        'file'             => 'imx_gcms.admin.inc',
    );

    /* Configuracion de la seccion de Frameworks */
    $items['admin/config/imx_gcms/sites/repos/%'] = array(
        'title'            => 'Sitios InventMX GCMS',
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_sites_repos',
        'page arguments'   => array(arg(5)),
        'type'             => MENU_NORMAL_ITEM,
    );

    /* Configuracion de la seccion de Frameworks */
    $items['admin/config/imx_gcms/sites/repo/%'] = array(
        'title'            => 'Sitios InventMX GCMS',
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_sites_repo_contents',
        'page arguments'   => array(arg(5)),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'imx_gcms.filter.inc',

    );

    /* Configuracion de la seccion de Frameworks */
    $items['admin/config/imx_gcms/recs'] = array(
        'title'            => 'GCMS-Recomendaciones GCMS',
        'access arguments' => array('administer imx gcms'),
        'page callback'    => 'imx_gcms_recs',
        'access_callback'  => TRUE,
    );


    $items['admin/config/imx_gcms/recs/manage_recs'] = array(
        'title'            => 'Recomendaciones',
        'type'             => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('administer imx gcms'),
        'weight'           => -10
    );

    $items['admin/config/imx_gcms/recs/manage_sites'] = array(
        'title'            => 'Red InventMX',
        "access callback"  => TRUE,
        "page callback"    => "imx_gcms_sites_list",
        "type"             => MENU_LOCAL_TASK,
        'access arguments' => array('administer imx gcms'),
        'weight'           => -10
    );


    $items['admin/config/imx_gcms/config'] = array(
        'title'            => 'Configuración  InventMx GCMS',
        'description'      => 'Configuración de InventMx GCMS.',
        'page callback'    => 'drupal_get_form',
        'type'             => MENU_NORMAL_ITEM,
        'access arguments' => array('configure imx gcms'),
        'page arguments'   => array('imx_gcms_admin_settings_form'),
        'file'             => 'imx_gcms.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function imx_gcms_permission()
{
    return array(
        'administer imx gcms' => array(
            'title'       => t('Administer InventMx GCMS'),
            'description' => t('Administrar InventMx GCMS Module.'),
        ),
        'configure imx gcms'  => array(
            'title'       => t('configure InventMx GCMS'),
            'description' => t('Configurar InventMx GCMS Module.'),
        ),
    );
}


function site_manage()
{

}

function imx_gcms_sites_list()
{
    $sitios = getAPISites(TRUE);
    $rows   = array();
    foreach ($sitios as $syname => $name) {
        $rows[] = array(
            $name,
            l("Ver Contenidos", "admin/config/imx_gcms/sites/repo/{$syname}/nodes", array("attributes" => array("target" => "_blank"))),
            l("Ver Repositorios", "admin/config/imx_gcms/sites/repos/{$syname}", array("attributes" => array("target" => "_blank"))),

        );
    }
    $table = array(
        'header' => array(
            t('Sitio'),
            t('Acciones')
        ),
        'rows'   => $rows
    );
    return theme('table', $table);
}

function imx_gcms_sites_repos()
{
    $site   = arg(5);
    $sitios = getAPISiteRepos($site);
    $rows   = array();
    foreach ($sitios as $repo) {
        $rows[] = array(
            $repo["reponame"],
            $repo["title"],
            $repo["description"],
            $repo["update"],
            l("Ver contenidos", "admin/config/imx_gcms/sites/repo/{$site}/{$repo["reponame"]}", array("attributes" => array("target" => "_blank"))),
        );
    }
    $table = array(
        'header' => array(
            t('Repo'),
            t('Titulo'),
            t('Descripción'),
            t('Actualizado'),
            t('Acciones'),
        ),
        'rows'   => $rows
    );
    return theme('table', $table);
}

function imx_gcms_sites_repo_contents()
{
    $form      = drupal_get_form("imx_gcms_filter_form");
    $site      = arg(5);
    $repo      = arg(6);
    $page      = (arg(7)) ? arg(7) : 1;
    $page_prev = ($page > 1) ? ($page - 1) : 1;
    $page_next = $page + 1;

    $cid = NULL;
    if (isset($_SESSION["imx_gcms"][$site]["filters"])) {
        $filters = $_SESSION["imx_gcms"][$site]["filters"];
    }
    $data = getAPISiteRepoContents($site, $repo, $filters, $page);
    $rows = array();


    foreach ($data as $node) {
        $type = getNodeAPIType($node);
        if (array_key_exists("hub_id", $node)) {
            $id = $node["hub_id"];
        } else {
            $id = $node['id'];
        }
        $rows[] = array(
            l($node["title"], $node["url"], array("attributes" => array("target" => "_blank"))),
            $node["taxonomy"][0]["name"],
            $type,
            date("h:i:s d-m-y", $node["changed"]),
            $node["submitted"]["name"],
            l("Ver información", "admin/config/imx_gcms/details/{$site}/{$id}", array("attributes" => array("target" => "_blank"))),
            l("Importar contenido", "admin/config/imx_gcms/prepare/add/{$site}/{$id}", array("attributes" => array("target" => "_blank"))),

        );
    }
    $table = array(
        'header' => array(
            t('Titulo'),
            t('Categoría'),
            t('Tipo'),
            t('Actualizado/Creado'),

            t('Pub. por'),
            t(''),
            t('')
        ),
        'rows'   => $rows
    );


    if (count($data)) {
        $navigation_html[] = "<a class='imx_gcms_nav' href='/admin/config/imx_gcms/sites/repo/{$site}/nodes/{$page_prev}'>Anterior</a>";
        $navigation_html[] = "<a class='imx_gcms_nav' href='/admin/config/imx_gcms/sites/repo/{$site}/nodes/{$page_next}'>Siguiente</a>";
        $navigation_html   = implode("", $navigation_html);
    }

    return drupal_render($form) . theme('table', $table) . $navigation_html;
}

function imx_gcms_recs()
{
    $site = IMX_GCMS_SITE;
    $repo = "recs";
    $data = getAPISiteRepoContents($site, $repo);
    $rows = array();
    foreach ($data as $node) {
        $type        = getNodeAPIType($node);
        $site_source = $node["rec_source"]["site"];
        if(!imx_gcms_check_item_import($node['id'],$node["rec_source"]["site"])){
            $rows[]      = array(
                $node["title"],
                $type,
                date("h:i:s d-m-y", $node["changed"]),
                $node["taxonomy"][0]["name"],
                $node["rec_source"]["site"],
                $node["submitted"]["name"],
                $node["rec_source"]["sender"],
                date("h:i:s d-m-y", $node["rec_source"]["sended"]),
                l("Ver contenido", "admin/config/imx_gcms/details/{$site_source}/{$node['id']}"),
                l("Importar contenido", "admin/config/imx_gcms/prepare/add/{$site_source}/{$node['id']}"),

            );
        }
    }
    $table = array(
        'header' => array(
            t('Titulo'),
            t('Tipo'),
            t('Fecha'),
            t('Categoría'),
            t('Sitio'),
            t('Public. por'),
            t('Rec. por'),
            t('Rec. el'),
            t(''),
            t('')
        ),
        'rows'   => $rows
    );
    return theme('table', $table);
}


function imx_gcms_add_item()
{
    // print_r(node_load(4022));
    $is_hub = FALSE;
    $site   = arg(4);
    $id     = arg(5);
    if ($site == "hub") {
        $is_hub = TRUE;
    }

    if (is_string($site) && (is_numeric($id) || $is_hub)) {
        $exists_import = imx_gcms_check_item_import($id, $site);
        if (!$exists_import) {
            $node_api = getAPISiteContent($site, $id);
            global $user;

            $node = prepareNode($node_api, $site, $id);
            node_object_prepare($node);
            $type    = getNodeAPIType($node_api);
            $form_id = $type . '_node_form';

            $output = drupal_get_form($form_id, $node);
            return render($output);
        } else {
            $options = array('absolute' => TRUE);
            $message = t('El contenido que tratas de importar ya esta guardado en este sitio puedes verlo aqui ' . l("puedes verlo aquí", url("node/{$exists_import}",$options)));
            drupal_set_message($message, "warning");
            drupal_goto("/admin/config/imx_gcms/sites/repo/{$site}/nodes");
        }
    } else {
        $message = t('La petición no se ha podido procesar correctamente, intenta nuevamente.');
        drupal_set_message($message, "warning");
        drupal_goto("admin/config/imx_gcms/sites");
    }
}


function prepareNode($node_api, $site, $id)
{
    global $user;
    $node           = new StdClass();
    $node->type     = getNodeAPIType($node_api);
    $node->language = LANGUAGE_NONE;
    $node->uid      = $user->uid;
    node_object_prepare($node);
            
    $node->title                               = $node_api["title"];
    $node->body[$node->language][0]['value']   = trim(strip_tags($node_api["body"],'<blockquote><iframe><h1><h2><h3><h6><ul><ol><li><p><br><strong><b><span><img><div>'));
    $node->body[$node->language][0]['summary'] = ($node_api["summary"]) ? strip_tags($node_api["summary"]) : text_summary(strip_tags($node_api["body"]), "filtered_html");
    $node->body[$node->language][0]['format']  = "filtered_html";

    //print_r($node);
    $tags_api                          = $node_api["tags"];
    $tags                              = prepareTags($tags_api);
    if($tags){
        $node->field_tags[$node->language] = $tags;
    }

    //Asignamos el datos de rastreo via GCMS
    $node->field_gcms[$node->language][0]["value"]              = 1;
    $node->field_gcms_id_source[$node->language][0]["value"]    = $node_api["id"];
    $node->field_gcms_site_source[$node->language][0]["value"]  = $site;
    $node->field_gcms_title_source[$node->language][0]["value"] = $node_api["title"];
    $node->field_gcms_url_source[$node->language][0]["value"]   = $node_api["url"];


    if (IMX_GCMS_FIELD_AUTOR != "NA") {
        $field_autor                                       = IMX_GCMS_FIELD_AUTOR;
        $node->{$field_autor}[$node->language][0]["value"] = ucwords($site);
    }

    if (IMX_GCMS_FIELD_VIDEO != "NA") {
        $videos                                = prepareVideosFieldCollection($node_api["videos"], $node);
        $field_video                           = IMX_GCMS_FIELD_VIDEO;
        $node->{$field_video}[$node->language] = $videos;
    }

    $images = (isset($_SESSION["imx_gcms"][$site][$id]["images"])) ? $_SESSION["imx_gcms"][$site][$id]["images"] : array();
    $image  = (isset($_SESSION["imx_gcms"][$site][$id]["image"])) ? $_SESSION["imx_gcms"][$site][$id]["image"] : array();


    if (IMX_GCMS_FIELD_IMAGES == IMX_GCMS_FIELD_IMAGE) {
        $field_images = IMX_GCMS_FIELD_IMAGES;
        $image_data   = (count($images)) ? $images : $image;
        foreach ($image_data as $file) {
            $file_array                     = (array)$file["file"];
            $file_array["alt"]              = $file["title"];
            $file_array["title"]            = $file["description"];
            $node->{$field_images}['und'][] = (array)$file_array;
            file_usage_add($file["file"], 'node', "file", $file["file"]->fid);
        }

    } else {
        $field_image  = IMX_GCMS_FIELD_IMAGE;
        $field_images = IMX_GCMS_FIELD_IMAGES;
        foreach ($image as $file) {
            $file_array          = (array)$file["file"];
            $file_array["title"] = $file["title"];
            $file_array["alt"]   = $file["description"];

            $node->{$field_image}['und'][] = (array)$file_array;
            file_usage_add($file["file"], 'node', "file", $file["file"]->fid);
        }
        if ($field_images != "NA") {
            foreach ($images as $file) {
                $file_array                     = (array)$file["file"];
                $file_array["alt"]              = $file["title"];
                $file_array["title"]            = $file["description"];
                $node->{$field_images}['und'][] = (array)$file_array;
                file_usage_add($file["file"], 'node', "file", $file["file"]->fid);
            }
        }
    }


    unset($_SESSION["imx_gcms"]);
    return $node;

}

function prepareTags($tags_api)
{
    $tag_list=false;
    if(variable_get("imx_gcms_field_tags",false) && variable_get("imx_gcms_field_v_tags",false)){
    foreach ($tags_api as $tag) {
        $term = taxonomy_get_term_by_name($tag["name"]);
        if (!count($term) || empty($term)) {
            $term       = new stdClass();
            $term->name = $tag["name"];
            $term->vid  = variable_get("imx_gcms_field_v_tags",0);
            taxonomy_term_save($term);
            $tag_list[] = array("tid" => $term->tid);
        } else {
            foreach ($term as $tag) {
                $tag_list[] = array("tid" => $tag->tid);
            }
        }

    }
        return $tag_list;
    }
}

function prepareVideosFieldCollection($videos, $node)
{
    $field_collection_video = IMX_GCMS_FIELD_VIDEO;
    $field_video_url        = IMX_GCMS_FIELD_VIDEO_URL;
    //$field_video_desc = IMX_GCMS_FIELD_VIDEO_DESC;

    $video_items = array();
    if (count($videos)) {
        foreach ($videos as $video) {
            if ($field_collection_video != "NA") {
                $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_collection_video)); // Create new field collection item.
                $field_collection_item->setHostEntity('node', $node); // Attach it to the node.
                $field_collection_item->{$field_video_url}[LANGUAGE_NONE][0] = array('input' => $video["video_url"], "video_id" => $video["youtube_id"]);
                $field_collection_item->save(TRUE);
                $id            = $field_collection_item->item_id;
                $video_items[] = array("value" => $id);
            }
        }
    }

    return $video_items;
}

/*
 * Implements batchAPI batch Page().
 */

function batch_transfer_image()
{

    $site       = arg(5);
    $id         = arg(6);
    $operations = array();

    $exists_import = imx_gcms_check_item_import($id, $site);
    if (!$exists_import) {

        $node_api = getAPISiteContent($site, $id);

        if (array_key_exists("grande", $node_api["images"])) {
            $principal = $node_api["images"]["grande"];
        } else {
            $principal = $node_api["images"]["principal"];
        }


        $images = $node_api["gallery"]["files"];

        $total_images = count($node_api["gallery"]["files"]);


        foreach ($principal as $image) {
            $image_data   = array("site" => $site, "id" => $id, "field" => "image", "data" => $image);
            $operations[] = array('process_image_batch', array($image_data, 1));
        }


        if (count($total_images) && is_array($images)) {
            foreach ($images as $image) {
                $image_data   = array("site" => $site, "id" => $id, "field" => "images", "data" => $image);
                $operations[] = array('process_image_batch', array($image_data, 1));
            }
        }

        $batch_config = array(
            'title'      => t('Transferencia de Imágenes'),
            'operations' => $operations,
            'finished'   => 'process_image_finished_batch', // Finished batch callback.
        );


        if (count($operations)) {
            batch_set($batch_config);
            batch_process('batch-demo');
        }
    } else {
        $options = array('absolute' => TRUE);
        $message = t('El contenido que tratas de importar ya esta guardado en este sitio puedes verlo aqui ' . l("puedes verlo aquí", url("/node/{$exists_import}",$options)));
        drupal_set_message($message, "warning");
        drupal_goto("/admin/config/imx_gcms/sites/repo/{$site}/nodes");
    }
}

/*
 * Implements batchAPI batch process().
 */

function process_image_batch($images, $max, &$context)
{
    global $user;
    $image_data                      = $images["data"];
    $context['results']["site_data"] = array("site" => $images["site"], "id" => $images["id"]);
    /*
    Set the number of nodes you want to create within a single iteration of the batch. This number
    should be pretty low as it is the reason why we're creating the batch process in the first place.
    */
    $limit = $max;

    /*
    Set the variables that need to persist throughout the batch process. These need to be set inside
    the $context array because that's what persists throughout the process.
    */
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['title']    = "Transferencia de galerias";
        $context['sandbox']['max']      = $max;
    }

    // Create some new nodes based on current progress and the $limit per page load. It’s important that you get this right otherwise you can potentially get stuck in an infinite loop or the process won’t do what you want it to.
    for ($i = 0; $i < $limit; $i++) {
        if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
            $context['sandbox']['progress']++; // Used to keep track of how many nodes we've already created.
            $context['results']["images"][] = array("url" => $image_data["url"]); // Keep a running tab of all of the nodes created.
            $context['message']             = "Transfiriendo  " . $image_data["url"];
            $file                           = transfer_image_remote($image_data);

            if (!array_key_exists("description", $image_data)) {
                $image_data["description"] = "";
            }
            $_SESSION["imx_gcms"][$images["site"]][$images["id"]][$images["field"]][] = array("file" => $file, "title" => ($image_data["title"])?$image_data["title"]:$image_data["descripcion"], "description" => ($image_data["descripcion"])?$image_data["descripcion"]:$image_data["title"]);
        }
    }
    // Check if the batch is finished
    if ($context['sandbox']['progress'] < $context['sandbox'] ['max']) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
}

/*
 * Implements batchAPI batch finish().
 */

function process_image_finished_batch($success, $results, $operations)
{
    if ($success) {
        $message = "Las imagenes han sido transferidas";
    } else {
        $message = t('Hubo errores al procesar las imagenes.');
    }
    drupal_set_message($message);
    drupal_goto("admin/config/imx_gcms/add/" . $results["site_data"]["site"] . "/" . $results["site_data"]["id"]);
}

function imx_gcms_recs_list()
{

}


function imx_gcms_detail_item()
{
    // print_r(node_load(4022));
    $site     = arg(4);
    $id       = arg(5);
    $id_parts = explode("_", $id);
    if (is_numeric($id_parts[0])) {
        $is_hub = TRUE;
    }

    $html = array();
    if (is_string($site) && (is_numeric($id) || $is_hub = TRUE)) {
        $node_api_url = getAPISiteContentURL($site, $id, "html");
        $url          = "'/admin/config/imx_gcms/prepare/add/{$site}/{$id}'";
        $html[]       = '<input type="button" value="Importar contenido" onclick="location.href=' . $url . '"/><br/><br/>';
        $html[]       = '<iframe width="1000" height="2000" src="' . $node_api_url . '"style="border: none;height:2000;width:960px;" allowtransparency="allowtransparency" frameborder="0"></iframe>';
        $html[]       = '<br/><input type="button" value="Importar contenido" onclick="location.href=' . $url . '"/>';


        return implode("\n", $html);
    } else {
        $message = t('La petición no se ha podido procesar correctamente, intenta nuevamente.');
        drupal_set_message($message, "warning");
        drupal_goto("admin/config/imx_gcms/sites");
    }
}


function imx_gcms_node_form_alter(&$form, &$form_state, $form_id)
{

}

function imx_gcms_form_alter(&$form, &$form_state, $form_id)
{
    if (arg(2) == "imx_gcms" && arg(3) == "add") {
        if ($form_id == 'article_node_form' || $form_id == 'gallerie_node_form' || $form_id == 'video_node_form') {
            $form['actions']['submit']['#submit'][] = 'imx_gcms_node_form_submit';
        }
    } else {
        if ($form_id == variable_get("imx_gcms_content_article", "article")."_node_form" || $form_id ==variable_get("imx_gcms_content_gallerie", "gallerie")."_node_form" || $form_id == variable_get("imx_gcms_content_video", "video")."_node_form") {
            $form['imx_gcms_send_to'] = array(
                '#type'     => 'select',
                '#multiple' => 'true',
                '#required' => FALSE,
                '#options'  => getAPISites(TRUE),
                '#title'    => t("Recomendar a:"),
            );

            $form['actions']['submit']['#submit'][] = 'imx_gcms_node_share_form_submit';
        }
    }
}

/**
 * Custom submit function.
 *
 */
function imx_gcms_node_form_submit($form, &$form_state)
{
    global $user;
    $node_log              = array();
    $node_log["site_src"]  = arg(4);
    $node_log["id_src"]    = arg(5);
    $node_log["site_dst"]  = $_SERVER["HTTP_HOST"];
    $node_log["id_dst"]    = $form_state["values"]["nid"];
    $node_log["timestamp"] = $form_state["values"]["created"];
    $node_log["publisher"] = array("name" => $user->name, "mail" => $user->mail);
    $fields                = array("id_source" => $node_log["id_src"], "id_dst" => $node_log["id_dst"], "site_src" => $node_log["site_src"], "created" => time(), "uid" => $user->uid);

    $node_form = $form["#node"];
    $node      = node_load($form_state["values"]["nid"]);
    //Asignamos el datos de rastreo via GCMS
    $node->field_gcms[LANGUAGE_NONE][0]["value"]                = "1";
    $node->field_gcms_id_source[LANGUAGE_NONE][0]["value"]      = $node_form->field_gcms_id_source["und"][0]["value"];
    $node->field_gcms_id_site_source[LANGUAGE_NONE][0]["value"] = $node_form->field_gcms_id_site_source["und"][0]["value"];
    $node->field_gcms_title_source[LANGUAGE_NONE][0]["value"] = $node_form->field_gcms_title_source["und"][0]["value"];
    $node->field_gcms_url_source[LANGUAGE_NONE][0]["value"]   = $node_form->field_gcms_url_source["und"][0]["value"];

    node_save($node);
    imx_gcms_insert_history_import($fields);
    imx_gcms_register_ga_event("GCMS:Editor Imports",$user->name,$node_log["site_src"],$form_state["values"]["nid"]);


    /*
    require_once('pheanstalk/pheanstalk_init.php');
    try {
        $pheanstalk = new Pheanstalk_Pheanstalk(IMX_API_QUEUE_DNS, IMX_API_QUEUE_PORT);
        if ($pheanstalk->getConnection()->isServiceListening()) {
            $pheanstalk
                ->useTube("imx_gcms_imports")
                ->put(json_encode($node_log));
            drupal_set_message("Datos  IMX_API_QUEUE enviados");
        }
    }
    catch (ErrorException $e) {
        drupal_set_message("No pudimos enviar el log de importación a IMX_API_QUEUE_DNS", "warning");
    }
    */
    //file_put_contents("/home/alex/node_{$node_log["site_src"]}_{$node_log["id_src"]}",json_encode($node_log));
}

/**
 * Custom submit function.
 *
 */
function imx_gcms_node_share_form_submit($form, &$form_state)
{
    if ($form_state["values"]["imx_gcms_send_to"]) {
        global $user;

        foreach ($form_state["values"]["imx_gcms_send_to"] as $site_dst) {
            $node_log              = array();
            $node_log["site_src"]  = IMX_GCMS_SITE;
            $node_log["id_src"]    = $form_state["values"]["nid"];
            $node_log["timestamp"] = time();
            $node_log["site_dst"]  = $site_dst;
            $node_log["publisher"] = array("name" => $user->name, "mail" => $user->mail);

            $fields = array("nid" => $form_state["values"]["nid"], "site_dst" => $site_dst, "created" => time(), "uid" => $user->uid);

            imx_gcms_insert_history_share($fields);

            //Registramos Log de usuario-sitio
            imx_gcms_register_ga_event("GCMS:Editor Shares",$user->name,$site_dst,$form_state["values"]["nid"]);




            //Envio de daros a API InventMX
            /*
            require_once('pheanstalk/pheanstalk_init.php');
            try {
                $pheanstalk = new Pheanstalk_Pheanstalk(IMX_API_QUEUE_DNS, IMX_API_QUEUE_PORT);
                if ($pheanstalk->getConnection()->isServiceListening()) {
                    $pheanstalk
                        ->useTube("imx_gcms_recs")
                        ->put(json_encode($node_log));
                    drupal_set_message("Datos  IMX_API_QUEUE enviados a " . $site_dst);

                } else {
                    drupal_set_message("No pudimos conectar con IMX_API_QUEUE_DNS", "warning");
                }
            }
            catch (ErrorException $e) {
                drupal_set_message("No pudimos enviar el log de recomendación a IMX_API_QUEUE_DNS a " . $site_dst, "warning");
            }
            */
        }
    }
    //file_put_contents("/home/alex/node_{$node_log["site_src"]}_{$node_log["id_src"]}",json_encode($node_log));
}
