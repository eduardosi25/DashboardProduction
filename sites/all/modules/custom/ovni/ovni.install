<?php
/**
 * Online Video Network Inventmx - OVNI
 * @file
 * Installation file
 */
/**
 * Implements hook_schema().
 */
function ovni_schema() {
  return _ovni_schema();
}
/**
 * Build schema fields
 * @return array
 */
function _ovni_schema(){
  $schema=array();
  //Table ovni_entities
  $schema['ovni_entities'] = array(
    'fields' => array(
      'eid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id ovni',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Entity name',
      ),
      'fid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Youtube foreing ID if have it',
      ),
      'status' => array(
        'type' => 'int',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Entity status',
      ),
      'parent' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Entity hierarchy parenthood',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the entity',
      ),
      'last_request' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for last request Youtube API',
      ),
      'total_items' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total items found on last request from Youtube API',
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'ovni_entities_status' => array('status'),
      'ovni_entities_eid_status' => array('eid','status'),
      'ovni_entities_fid' => array('fid'),
      'ovni_entities_eid_fid' => array('eid','fid'),
      'ovni_entities_parent' => array('parent'),
      'ovni_entities_eid_parent' => array('eid','parent'),
    ),
  );
  //Table ovni_items
  $schema['ovni_items'] = array(
    'fields' => array(
      'iid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The item id ovni',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The item name or title',
      ),
      'fid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Youtube foreing ID if have it',
      ),
      'status' => array(
        'type' => 'int',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Item status',
      ),
      'eid' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The entity relation id. Only channels from Youtube.',
      ),
      'nid' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The NODE ID when the module found a video from OVNI on Youtube.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the item',
      ),
      'last_request' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for last request Youtube API',
      ),
    ),
    'foreign keys' => array(
      'ovni_entities' => array(
        'table' => 'ovni_entities',
        'columns' => array('eid' => 'eid'),
      ),
    ),
    'primary key' => array('iid'),
    'indexes' => array(
      'ovni_items_status' => array('status'),
      'ovni_items_iid_status' => array('iid','status'),
      'ovni_items_nid' => array('nid'),
      'ovni_items_iid_nid' => array('iid','nid'),
      'ovni_items_fid' => array('fid'),
      'ovni_items_iid_fid' => array('iid','fid'),
      'ovni_items_eid' => array('eid'),
      'ovni_items_iid_eid' => array('iid','eid'),
    ),
  );
  //Table ovni_items
  $schema['ovni_group_items'] = array(
    'fields' => array(
      'gid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The item id ovni',
      ),
      'iid' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Item ID',
      ),
      'eid' => array(
        'type' => 'int',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Entity ID',
      ),
    ),
    'foreign keys' => array(
      'ovni_group_items' => array(
        'table' => 'ovni_items',
        'columns' => array('iid' => 'iid'),
      ),
      'ovni_group_entities' => array(
        'table' => 'ovni_entities',
        'columns' => array('eid' => 'eid'),
      ),
    ),
    'primary key' => array('gid'),
    'indexes' => array(
      'ovni_group_items_iid' => array('iid'),
      'ovni_group_items_eid' => array('eid'),
      'ovni_group_items_iid_eid' => array('iid','eid'),
    ),
  );
  return $schema;
}
/**
 * Implements hook_install().
 */
function ovni_install() {
  //General settings
  variable_set('ovni_status',FALSE);
  variable_set('ovni_youtube',array());
  variable_set('ovni_player',array());
  //Populate entities
  ovni_populate_entities();
}
/**
 * Implements hook_uninstall().
 */
function ovni_uninstall() {
  //General settings
  variable_del('ovni_status');
  variable_del('ovni_youtube');
  variable_del('ovni_player');
  if (db_table_exists('ovni_entities')) {
    db_drop_table('ovni_entities');
  }
  if (db_table_exists('ovni_items')) {
    db_drop_table('ovni_items');
  }
  if (db_table_exists('ovni_group_items')) {
    db_drop_table('ovni_group_items');
  }
}
/**
 * Implements hook_requirements().
 */
function ovni_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $youtube=variable_get('ovni_youtube', '');
    if (!isset($youtube['apikey']) || empty($youtube['apikey'])) {
      $requirements['ovni'] = array(
        'title' => t('Youtube API Key'),
        'description' => t('Maybe you need to config this module before that you can use it. Go to <a href="@url">OVNI Integration</a>.', array('@url' => '/admin/config/system/ovni/settings')),
        'severity' => REQUIREMENT_WARNING,
        'value' => t('Not configured'),
      );
    }
  }
  return $requirements;
}
/**
 * Populate 'ovni_entities' with Accounts && Channels from Youtube. Require a GDoc with this Info.
 */
function ovni_populate_entities(){
  if(db_table_exists('ovni_entities')){
    //Set default accounts Youtube
    ovni_set_default_accounts();
    //Get channels
    $results=get_channels();
    $channels = array();
    foreach ($results as $result) {
      $channels[]=array(
        'name'   => $result['channel'],
        'fid'    => $result['channelid'],
        'status' => $result['status']=='activo' ? 1 : 0,
        'parent' => ovni_search_parent_channel($result['accountid']),
      );
    }
    if (!empty($channels)) {
      $query = db_insert('ovni_entities');
      $query->fields(array('name','fid','status','parent'));
      foreach ($channels as $channel) {
        $query->values($channel);
      }
      $query->execute();
    }
  }
}

/**
 * Search parent for entities
 * @param $accountid
 * @return int
 */
function ovni_search_parent_channel($accountid){
  if(!$accountid){
    die('Error');
  }

  $result = db_select('ovni_entities', 'o')
    ->fields('o',array('eid'))
    ->condition('fid', $accountid,'=')
    ->execute()
    ->fetchAssoc();

  return isset($result['eid']) && !empty($result['eid']) ? $result['eid'] : 0;
}
/**
 * Set entities defaults. Commonly accounts from Youtube
 */
function ovni_set_default_accounts(){
  $accounts = array(
    0 => array(
      'eid'    => 1,
      'name'   => 'InventMX SAPI de CV',
      'fid'    => 'VMgHVErQPDlqMEv_ZeSdZg',
      'status' => 1,
    ),
    1 => array(
      'eid'    => 2,
      'name'   => 'InventMX SAPI de CV - Entretenimiento',
      'fid'    => '7BywZbyTtOWhbGwq7JCRrQ',
      'status' => 1,
    ),
    2 => array(
      'eid'    => 3,
      'name'   => 'InventMX SAPI de CV - Network',
      'fid'    => 'NUWTEInn0eW6mHZntG9hLg',
      'status' => 1,
    ),
  );
  $query = db_insert('ovni_entities');
  $query->fields(array('eid','name','fid','status'));
  foreach ($accounts as $account) {
    $query->values($account);
  }
  $query->execute();
}
